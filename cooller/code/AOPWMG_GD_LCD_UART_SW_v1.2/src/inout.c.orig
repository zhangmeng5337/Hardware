#include "inout.h"
#include "cmd_process.h"
#include "app_lcd.h"
#include "sensor.h"

#if CPU == ST
extern UART_HandleTypeDef huart3;
#endif
uint8_t LED_Ram[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};				// 数码显示屏 8888
uint8_t LED_Pilot=0x00;							// LED指示灯  bit 0 电解中   bit 1 雾化中 bit 2 缺水  bit3 min  bit 4 原水页面高 bit 5 废水页面高
uint8_t LED_Aper=20;								// LED光圈
uint8_t Speak_Flag=0;					/* 蜂鸣器      0 关闭  1 开机   2 按键音  3 结束音  4 报警音 */
inout_stru inout_usr;
touch_stru touch_usr;
/*
*********************************************************************************************************
*	函 数 名: bsp_InitLed
*	功能说明: 配置LED指示灯相关的GPIO,  该函数被 bsp_Init() 调用。
*	形    参:  无
*	返 回 值: 无
*********************************************************************************************************
*/
void Soft_Reset(void)
{
    __set_FAULTMASK(1);		  //关闭所有中断
    NVIC_SystemReset();			//复位系统
}
touch_stru *getTouch()
{
    return &touch_usr;
}
void inout_Init()
{
    //HAL_UART_Receive_IT(&huart3, &res, 1);
    //__HAL_UART_CLEAR_FLAG(&huart3,UART_IT_RXNE);

#if CPU == ST
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);	//使能空闲中断
    __HAL_UART_CLEAR_FLAG(&huart3,UART_IT_IDLE);
    HAL_UART_Receive_DMA(&huart3,inout_usr.Usart3_NewFax,UART3_SIZE);
#else

    dma_single_data_parameter_struct dma_init_struct;
    usart_interrupt_enable(UART3, USART_INT_IDLE);
    usart_flag_clear(UART3, USART_FLAG_IDLE);
    usart_dma_receive_config(UART3, USART_DENR_ENABLE);
    nvic_irq_enable(DMA1_Channel4_IRQn, 0, 0);





    /* deinitialize DMA1 channel2 (USART0 rx) */
    dma_deinit(DMA1, DMA_CH4);
    dma_init_struct.direction = DMA_PERIPH_TO_MEMORY;
    dma_init_struct.memory0_addr = (uint32_t)inout_usr.Usart3_NewFax;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.number = UART3_SIZE;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(UART3);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_memory_width = DMA_PERIPH_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
    dma_single_data_mode_init(DMA1, DMA_CH4, &dma_init_struct);

    /* configure DMA mode */
    dma_circulation_disable(DMA1, DMA_CH4);
    dma_channel_subperipheral_select(DMA1, DMA_CH4, DMA_SUBPERI4);
    /* enable DMA1 channel2 transfer complete interrupt */
    dma_interrupt_enable(DMA1, DMA_CH4, DMA_CHXCTL_FTFIE);
    /* enable DMA1 channel2 */
    dma_channel_enable(DMA1, DMA_CH4);
#endif
}
/***********************************************************************************
 * 函数名：EM4305_Read_Data(uint8_t page,uint8_t data[4])
 * 描述  ：从卡中读取一页数据
 * 输入  ：无
 * 输出  : 获取到数据返回1 未获取数据则返回0
 * 调用  ：外部调用
**********************************************************************************/
/* 添加对显示板上LED灯的控制 LED_Ram[16]---LED_[24] 其中1表示量 0表示灭  ---20210722 */

uint8_t Send_LED_Data(void)
{
    static uint8_t send_time;
    uint8_t buf[10+14];
    uint8_t i,err=0,temp;
    unsigned int txcount0;
    if(send_time++<2) return 0;
    send_time=0;

    // 填写数据
    buf[0]=0xAA;
    buf[1]=0x0A;

    buf[2]=LED_Ram[3];
    buf[3]=LED_Ram[2];
    buf[4]=LED_Ram[1];
    buf[5]=LED_Ram[0];

    buf[6]=LED_Ram[7];
    buf[7]=LED_Ram[6];
    buf[8]=LED_Ram[5];
    buf[9]=LED_Ram[4];

    buf[10]=LED_Ram[11];
    buf[11]=LED_Ram[10];
    buf[12]=LED_Ram[9];
    buf[13]=LED_Ram[8];

    buf[14]=LED_Ram[15];
    buf[15]=LED_Ram[14];
    buf[16]=LED_Ram[13];
    buf[17]=LED_Ram[12];

    buf[18]=LED_Pilot;
    buf[19]=LED_Aper;
    buf[20]=Speak_Flag;
    Speak_Flag=0;

    //buf[21]=


    // 校验
    for(i=1; i<21; i++)
    {
        err^=buf[i];
    }

    buf[21]=err;
    buf[22]=0xBB;

#if CPU == ST
    // 发送数据
    temp=HAL_UART_Transmit(&huart3,buf,23,10);
#else

    txcount0 = 0;
    while(RESET == usart_flag_get(UART3, USART_FLAG_TBE));
    usart_data_transmit(UART3, buf[txcount0++]);
#endif

    return temp;
}
void inout_callback()
{
    dma_single_data_parameter_struct dma_init_struct;
    inout_usr.receivedFlag =1;
#if CPU == ST
    HAL_UART_DMAStop(&huart3);
    HAL_UART_DMAResume(&huart3)	;
    HAL_UART_Receive_DMA(&huart3,inout_usr.Usart3_NewFax,UART3_SIZE);
#else

    usart_dma_receive_config(UART3, USART_DENR_ENABLE);
    usart_dma_transmit_config(UART3, USART_DENT_ENABLE);
    /* deinitialize DMA1 channel2 (USART0 rx) */
    dma_deinit(DMA1, DMA_CH2);
    dma_init_struct.direction = DMA_PERIPH_TO_MEMORY;
    dma_init_struct.memory0_addr = (uint32_t)inout_usr.Usart3_NewFax;
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
    dma_init_struct.number = UART3_SIZE;
    dma_init_struct.periph_addr = (uint32_t)&USART_DATA(UART3);
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
    dma_init_struct.periph_memory_width = DMA_PERIPH_WIDTH_8BIT;
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
    dma_single_data_mode_init(DMA1, DMA_CH3, &dma_init_struct);
    nvic_irq_enable(DMA1_Channel3_IRQn, 0, 1);
#endif
}
inout_stru *GetInOut()
{
    return &inout_usr;
}
touch_stru *GetTouchInOut()
{
    return &touch_usr;
}


/**********************************************************************************/
uint8_t touch_pro()
{
    if(touch_usr.touch_flag == 1)
    {
        if(touch_usr.page_id == Main_PAGE)//main page
        {
					  inout_usr.key_cali_mode = 0;
					  inout_usr.key_cali_value = 0;
					  inout_usr.update = 0;

            if(touch_usr.control_id == REBOOT_ID)//reboot
            {
                if(touch_usr.status == 0x55)
                    inout_usr.key_reset_mode = 1;

            }
            if(touch_usr.control_id == WASH_ID)//wash
            {
                if(touch_usr.status == 0x55)
                {
                    GetSensor()->status[WASH_INDEX] = WASH_INDEX;//washing
                    inout_usr.key_wash_mode = 1;
                }


            }
		#if DEV_TYPE == 0
			if(touch_usr.control_id == FACTORY_ID)
			{
			    if(touch_usr.factory_count<=255)
				touch_usr.factory_count = touch_usr.factory_count + 1;

			}
			else
				touch_usr.factory_count = 0;
			   

		 #endif
            inout_usr.key_cali_mode = 0;
            inout_usr.key_cali_value = 0;
        }
		#if DEV_TYPE == 1
		 if(touch_usr.page_id == SETTING_PAGE)//CALIBRATION
        {
		if(touch_usr.control_id == FACTORY_ID)
		{
			if(touch_usr.factory_count<=255)
			touch_usr.factory_count = touch_usr.factory_count + 1;
		
		}
		else
			touch_usr.factory_count = 0;  

		}
		 #endif
        if(touch_usr.page_id == CALIBRATION_PAGE)//CALIBRATION
        {

            if(touch_usr.status == 0x55)
            {
                GetSensor()->orp_ph_adc = 0;
                inout_usr.key_cali_mode = 1;
                inout_usr.key_wash_mode = 0;
                //inout_usr.key_cali_mode = 0;
                //inout_usr.key_cali_value = 0;

                if(touch_usr.control_id == PH1_CAL_ID||touch_usr.control_id == PH2_CAL_ID)//PH calibration
                {


                    inout_usr.key_cali_type = touch_usr.control_id;
                    if(touch_usr.control_id == PH1_CAL_ID)
                    {
                        inout_usr.key_cali_value = 1;//start ph1
                    }
                    else if(touch_usr.control_id == PH2_CAL_ID)
                    {
                        inout_usr.key_cali_value = 4;//start ph2
                    }
                    getTouch()->key = 0 ;
                }
                else if(touch_usr.control_id == PH1_CAL_OK_ID||touch_usr.control_id == PH2_CAL_OK_ID)
                {
                    if(getTouch()->last_ctrl_id == PH1_CAL_ID)
                    {
                        inout_usr.key_cali_value = 10;//done ph1
                        getTouch()->last_ctrl_id = 0;

                    }
                    else if(getTouch()->last_ctrl_id == PH2_CAL_ID)
                    {
                        inout_usr.key_cali_value = 11;//done ph2
                        getTouch()->last_ctrl_id = 0;
                    }
                    else
                    {
                        inout_usr.key_cali_mode = 0;
                        inout_usr.key_cali_value = 0;
                        getTouch()->last_ctrl_id = 0;
                    }
                    getTouch()->key = 0 ;

                }
                else if(touch_usr.key == ENTER)//ORP calibration start
                {
                    if(touch_usr.control_id == ORP_EDIT_ID)
                    {
                        inout_usr.key_cali_mode = 2;
                        inout_usr.key_cali_type = touch_usr.control_id;
                        inout_usr.key_cali_value = 1;
						            touch_usr.last_ctrl_id =0;

                    }
				if(touch_usr.control_id == PH1_EDIT_ID)
				{
					inout_usr.key_cali_mode = 1;
					inout_usr.key_cali_type = touch_usr.control_id;
					inout_usr.key_cali_value = 1;
								touch_usr.last_ctrl_id =0;
				
				}

                }
                else if(touch_usr.control_id == ORP_CAL_OK_ID)//done orp
                {

                    if(getTouch()->last_ctrl_id == ENTER)
                    {
                        inout_usr.key_cali_mode = 2;
                        inout_usr.key_cali_value = 2;
                        getTouch()->last_ctrl_id = 0;
                        getTouch()->key = 0;
                    }
                    else
                    {
                        inout_usr.key_cali_mode = 0;
                        inout_usr.key_cali_value = 0;
                        getTouch()->last_ctrl_id = 0;
                        getTouch()->key = 0;

                    }


                }
                else if(touch_usr.control_id == CALIBRATION_OK_ID)//
                {

                    inout_usr.key_cali_mode = 0;
                    inout_usr.key_cali_value = 0;
                    getTouch()->last_ctrl_id = 0;
                    getTouch()->key = 0 ;

                }
                else if(touch_usr.control_id == CALIBRATION_RE_ID)//
                {

                    inout_usr.key_cali_mode = 2;
                    inout_usr.key_cali_value = 2;
                    getTouch()->last_ctrl_id = 0;
                    getTouch()->key = 0 ;
                }
								else
								{
                    inout_usr.key_cali_mode = 2;
                    inout_usr.key_cali_value = 2;
                    getTouch()->last_ctrl_id = 0;
                    getTouch()->key = 0 ;								
								}

            }
						


        }

    }
    touch_usr.touch_flag = 0;
    return 0;
}




