/* --COPYRIGHT--,BSD
 * Copyright (c) 2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/

#include "unit_tests.h"
#include "sys.h"

/* NOTES:
 * - Unless specified, tests should be self-contained (results should not depend on the testing sequence)!
 * - Tests that modify register configurations should restore the device to its default state.
 * - All tests should return a boolean data type!
 * - All test functions and conditions should be documented to explain their significance.
 * - Avoid polling nDRDY without a timeout to avoid the possibility of software entering into an infinite loop.
 */

data_ai_stru data_ai;


///////////////////////////////////   MAIN   ///////////////////////////////////

// This function will run all test cases and return true if all tests PASS
bool run_self_tests(void)
{
    bool allTestsPassed = true;

    delay_ms(50);   // Delay in case we are calling this function while the power supplies are still settling.
   // toggleRESET();  // NOTE: We are assuming that this function is working before we've tested it.


    /// GPIO Functionality ///////////////////////////////////////

    // NOTE: All tests assume GPIO pins are controlled by MCU.
    // If pins are tied, update the tests to check for desired state.

    allTestsPassed &= test_PWDN_pin();
    allTestsPassed &= test_START_pin();
    allTestsPassed &= test_RESET_pin();
    allTestsPassed &= test_CS_pin();
    allTestsPassed &= test_DRDY_interrupt();


    /// SPI Functionality ////////////////////////////////////////

    allTestsPassed &= test_read_register();
    allTestsPassed &= test_write_register();
    allTestsPassed &= test_reset_command();
    allTestsPassed &= test_multiple_read_write();
    allTestsPassed &= test_read_data();


    /// ADC Performance  /////////////////////////////////////////

   // allTestsPassed &= test_noise();


    return allTestsPassed;
}



////////////////////////////////   TEST CASES   ////////////////////////////////


/// GPIO Functionality ///////////////////////////////////////

// bool test_PWDN_pin(void)
// Tests if the GPIO pin connected to /PWDN is functioning
// NOTE: This test will NOT catch broken connections between the MCU and ADC!
bool test_PWDN_pin(void)
{
//    bool b_pass = true;
  //  bool setting;

    // Set nCS LOW and read it back
   // setPWDN(LOW);
   // setting = getPWDN();
   // b_pass &= (setting == LOW);

    // Set nPWDN HIGH and read it back
   // setPWDN(HIGH);
    //setting = getPWDN();
    //b_pass &= (setting == HIGH);

    return 0;
}

// bool test_START_pin(void)
// Tests if the GPIO pin connected to START is functioning
// NOTE: This test will NOT catch broken connections between the MCU and ADC!
bool test_START_pin(void)
{
    bool b_pass = true;
    bool setting;

    // Set nCS LOW and read it back
    setSTART(LOW);
    setting = getSTART();
    b_pass &= (setting == LOW);

    // Set START HIGH and read it back
    setSTART(HIGH);
    setting = getSTART();
    b_pass &= (setting == HIGH);

    return b_pass;
}

// bool test_RESET_pin(void)
// Tests if the GPIO pin connected to /RESET is functioning
// NOTE: This test will NOT catch broken connections between the MCU and ADC!
bool test_RESET_pin(void)
{
   // bool b_pass = true;
  //  bool setting;

    // Set nRESET LOW and read it back
   // setRESET(LOW);
    //setting = getRESET();
    //b_pass &= (setting == LOW);

    // Set nRESET HIGH and read it back
   // setRESET(HIGH);
   // setting = getRESET();
   // b_pass &= (setting == HIGH);

    return 0;
}

// bool test_CS_pin(void)
// Tests if the GPIO pin connected to /CS is functioning
// NOTE: This test will NOT catch broken connections between the MCU and ADC!
bool test_CS_pin(void)
{
    bool b_pass = true;
    bool setting;

    // Set nCS LOW and read it back
    setCS(1,LOW);
    setting = getCS();
    b_pass &= (setting == LOW);

    // Set nCS HIGH and read it back
    setCS(1,HIGH);
    setting = getCS();
    b_pass &= (setting == HIGH);

    return b_pass;
}

// bool test_DRDY_interrupt(void)
// Tests if the /DRDY interrupt and interrupt handler is functioning
bool test_DRDY_interrupt(void)
{
    bool b_pass = true;

    // Set START and nPWDN pins high and check if nDRDY is active and interrupt is functioning
    //setPWDN(HIGH);
    setSTART(HIGH);
    //toggleRESET();  // Abort current conversion
    b_pass &= waitForDRDYinterrupt(1,50);
    b_pass &= waitForDRDYinterrupt(2,50);
    return b_pass;
}


/// SPI Functionality ////////////////////////////////////////

// bool test_read_register(void)
// Tests if reading a (non-zero) register returns the expected result.
bool test_read_register(void)
{
    bool b_pass = true;
    uint8_t value;

   // toggleRESET();

    value = readSingleRegister(REG_ADDR_CONFIG0);
    b_pass &= (value == CONFIG0_DEFAULT);

    return b_pass;
}

// bool test_write_register(void)
// Tests if writing to and then reading back a register returns the expected result.
bool test_write_register(void)
{
    bool b_pass = true;
    uint8_t writeValue, readValue;

    writeValue = (~CONFIG0_DEFAULT) & (0x7E);
    writeSingleRegister(REG_ADDR_CONFIG0, writeValue);

    readValue = readSingleRegister(REG_ADDR_CONFIG0);
    b_pass &= (readValue == writeValue);
	
	// Restore default register state
    sendCommand(OPCODE_RESET);

    return b_pass;
}

// bool test_reset_command(void)
// Tests if the RESET SPI command causes a register to return to its default value.
bool test_reset_command(void)
{
    bool b_pass = true;
    uint8_t writeValue, readValue;

    // Write non-default value to register
    writeValue = (~CONFIG0_DEFAULT) & (0x7E);
    writeSingleRegister(REG_ADDR_CONFIG0, writeValue);

    // Issue reset command
    sendCommand(OPCODE_RESET);

    // Check that internal array was automatically updated
    b_pass &= (getRegisterValue(REG_ADDR_CONFIG0) == CONFIG0_DEFAULT);

    // Check if read register command returns default value
    readValue = readSingleRegister(REG_ADDR_CONFIG0);
    b_pass &= (readValue == CONFIG0_DEFAULT);

    return b_pass;
}

// bool test_multiple_read_write(void)
// Tests if writing to and then reading back multiple registers returns the expected results.
bool test_multiple_read_write(void)
{
    bool b_pass = true;
    uint8_t i, writeValues[7];

    // Test data - when reasonable, register bits where inverted
    writeValues[0]   = 0x74u;   // CONFIG0
    writeValues[1]   = 0x7Cu;   // CONFIG1
    writeValues[2]   = 0xFFu;   // MUXSCH
    writeValues[3]   = 0xFFu;   // MUXDIF
    writeValues[4]   = 0x00u;   // MUXSG0
    writeValues[5]   = 0x00u;   // MUXSG1
    writeValues[6]   = 0xFFu;   // SYSRED

    // In case of external GPIO connections, do not test GPIO pins here.
    // This should be done in a separate test case.

    // Write registers
    writeMultipleRegisters(REG_ADDR_CONFIG0, 7, writeValues);

    // Check that internal array was automatically updated
    for (i = 0; i < 7; i++)
    {
        b_pass &= (getRegisterValue(i) == writeValues[i]);
    }

    // Read back registers
    readMultipleRegisters(REG_ADDR_CONFIG0, 7);

    // Check that read back values match the written values
    for (i = 0; i < 7; i++)
    {
        b_pass &= (getRegisterValue(i) == writeValues[i]);
    }
	
	// Restore default register state
    sendCommand(OPCODE_RESET);

    return b_pass;
}
void ads1158_config()
{
	uint8_t  writeValues[7];

	// Test configuration
	  writeValues[0]   = CONFIG0_DEFAULT & ~CONFIG0_MUXMOD_MASK;  // Auto-scan mode
	  writeValues[1]   = CONFIG1_DEFAULT & CONFIG1_DRATE_1953SPS; // Slowest data rate
	  writeValues[2]   = MUXSCH_DEFAULT;
	  writeValues[3]   = MUXDIF_DEFAULT;						  // Differential channels off
	  writeValues[4]   = 0xff;									  // Single-ended channels off
	  writeValues[5]   = 0xff;
	  writeValues[6]   = SYSRED_REF_ENABLE	  |
						 SYSRED_GAIN_ENABLE   | \
						 SYSRED_TEMP_ENABLE   | \
						 SYSRED_VCC_ENABLE	  | \
						 SYSRED_OFFSET_ENABLE;					  // Enable all system monitors
	
	  // Ensure device is powered, converting, and reset to default values
	  startConversions();
	  //toggleRESET();
	
	  // Write registers
	  writeMultipleRegisters(REG_ADDR_CONFIG0, 7, writeValues);

}
//void dat_adc_proc()
//{
//	  unsigned char i;
//    for (i = 0; i < CHANNEL_SIZE; i++)
//    {
//       
//        // Not required, but added to allow for debugger to halt code execution
//        setSTART(HIGH);
//         readData(DIRECT);
//        // Wait and check that /DRDY interrupt occurred
//        //b_pass = waitForDRDYinterrupt(1,10);
//        
//        //  Read data in read direct mode
//        //if(b_pass)
//        	//dataValues[i] = readData(&statusBytes[i], NULL, DIRECT);

//        // Not required, but added to allow for debugger to halt code execution
//        setSTART(LOW);
//    }

//}
// bool test_read_data(void)
// Tests if reading data from the internal monitoring channels returns data within an expected range.
bool test_read_data(void)
{
    uint8_t b_pass = 1;
    uint8_t i, statusBytes[5], statusGood;
    uint32_t dataValues[CHANNEL_SIZE], upperLimit, lowerLimit;
	
  // ads1158_config();
  
       // Read all data monitor channels
    for (i = 0; i < CHANNEL_SIZE; i++)
    {
       
        // Not required, but added to allow for debugger to halt code execution
        setSTART(HIGH);

        // Wait and check that /DRDY interrupt occurred
        b_pass = waitForDRDYinterrupt(1,10);
        
        //  Read data in read direct mode
        if(b_pass==1)
        	//dataValues[i] = readData(&statusBytes[i], NULL, DIRECT);
         readData(1,DIRECT);
        // Not required, but added to allow for debugger to halt code execution
        setSTART(LOW);
    }
	 for (i = 0; i < CHANNEL_SIZE; i++)
	 {
		
		 // Not required, but added to allow for debugger to halt code execution
		 setSTART(HIGH);
	 
		 // Wait and check that /DRDY interrupt occurred
		 b_pass = waitForDRDYinterrupt(1,10);
		 
		 //  Read data in read direct mode
		 if(b_pass==1)
			 //dataValues[i] = readData(&statusBytes[i], NULL, DIRECT);
		  readData(2,DIRECT);
		 // Not required, but added to allow for debugger to halt code execution
		 setSTART(LOW);
	 }
	 if(get_ADC_data()->update)
	 {	
	    uint32_t upperByte 	= ((uint32_t) (get_ADC_data()->data_inADC[CHANNEL_SIZE*2-2]) & 0xFF) << 8;
	    uint32_t middleByte  = ((uint32_t)(get_ADC_data()->data_inADC[CHANNEL_SIZE*2-1])  & 0xFF) ;
		data_ai.ref1 = upperByte|middleByte;
		data_ai.ref1 = data_ai.ref1/3072.0;		

		  upperByte  = ((uint32_t) (get_ADC_data()->data2_inADC[CHANNEL_SIZE*2-2]) & 0xFF) << 8;
		  middleByte  = ((uint32_t)(get_ADC_data()->data2_inADC[CHANNEL_SIZE*2-1])  & 0xFF) ;
		 data_ai.ref2 = upperByte|middleByte;
		 data_ai.ref2 = data_ai.ref2/3072.0; 

		 for(i=0;i<16;i++)
		 {
		 	 upperByte	= ((uint32_t) (get_ADC_data()->data_inADC[2*(i)]) & 0xFF) << 8;
			 middleByte  = ((uint32_t)(get_ADC_data()->data_inADC[2*(i)+1])  & 0xFF) ;
			 data_ai.data_ai[i]= upperByte|middleByte;
			 data_ai.data_ai[i]= data_ai.data_ai[i]/30720;			 
		     data_ai.data_ai[i]= data_ai.data_ai[i]*data_ai.ref1;	
		 }
	 for(i=0;i<16;i++)
	 {
		 upperByte	= ((uint32_t) (get_ADC_data()->data2_inADC[2*(i)]) & 0xFF) << 8;
		 middleByte  = ((uint32_t)(get_ADC_data()->data2_inADC[2*(i)+1])  & 0xFF) ;
		 data_ai.data2_ai[i]= upperByte|middleByte;
		 data_ai.data2_ai[i]= data_ai.data2_ai[i]/30720;			 
		 data_ai.data2_ai[i]= data_ai.data2_ai[i]*data_ai.ref2; 
	 }

		get_ADC_data()->update = 0;
	 }

    
    return b_pass;
}


void adc_proc()
{
   registerTick(ADC_SAMP_TICK_NO,2000);
   if(GetTickResult(ADC_SAMP_TICK_NO)==1)
   	{
   	     reset_registerTick(ADC_SAMP_TICK_NO);
  		 test_read_data();

   }

}
